name: "Issue Milestone Management"

on:
  issues:
    types: [labeled, unlabeled]

jobs:
  manage-milestone:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Add "High Priority" milestone to issues with "P1" label
        if: github.event.action == 'labeled' && contains(github.event.issue.labels.*.name, 'P1')
        uses: actions/github-script@v4
        with:
          script: |
            const label = context.payload.label.name;
            if (label === 'P1') {
              const issue = context.issue;
              // Use github.issues.listMilestones instead of github.issues.listMilestonesForRepo
              const milestones = await github.issues.listMilestones({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              const milestone = milestones.data.find(m => m.title === 'High Priority');
              if (milestone) {
                await github.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  milestone: milestone.number
                });
              }
            }

      - name: Remove "High Priority" milestone from issues that remove the "P1" label
        if: github.event.action == 'unlabeled' && contains(context.payload.label.name, 'P1')
        uses: actions/github-script@v4
        with:
          script: |
            const label = context.payload.label.name;
            if (label === 'P1') {
              const issue = context.issue;
              // Use github.issues.listMilestones instead of github.issues.listMilestonesForRepo
              const milestones = await github.issues.listMilestones({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              const milestone = milestones.data.find(m => m.title === 'High Priority');
              if (milestone) {
                await github.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  milestone: null
                });
              }
            }
